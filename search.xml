<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>嵌入式基础知识笔记V1</title>
      <link href="/2024/01/12/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0V1/"/>
      <url>/2024/01/12/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0V1/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式的基础知识"><a href="#嵌入式的基础知识" class="headerlink" title="嵌入式的基础知识"></a>嵌入式的基础知识</h1><h2 id="嵌入式处理器的分类"><a href="#嵌入式处理器的分类" class="headerlink" title="嵌入式处理器的分类"></a>嵌入式处理器的分类</h2><p><strong>MCU</strong>（Micro-Controller Unit） <strong>特点</strong>：资源有限、逻辑简单、特定任务</p><p><strong>应用</strong>：家电、汽车控制系统、物联网设备</p><p><strong>DSP</strong>（Digital Signal Processor）<strong>特点</strong>：在数字信号处理方面的高效运算能力、设计数学信号（音频，图像等）处理</p><p><strong>应用</strong>：无线通信、音视频处理、雷达系统</p><p><strong>FPGA</strong>（Field-Programmable Gate Array）<strong>特点</strong>;使用前可由用户编程的集成电路。灵活性、可重构性、高实时性</p><p><strong>应用</strong>：原型设计，加速计算，仪器测控</p><p><u><strong>其中经典的MCU有：89C51、STM32、ESP32</strong></u></p><p><strong>ARM</strong>: 一家英国公司，它设计了一系列低功耗、高性能的处理器架构，授权给其他公司。通常指MCU中的一种。</p><p><strong>树莓派</strong>:每个树莓派板都包含一个芯片，其中集成了处理器、内存、输入&#x2F;输出接口等组件。树莓派的SoC中包含了ARM架构的处理器核心。</p><p><strong>Arduino</strong>:是一个开源嵌入式硬件平台，用来供用户制作可交互式的嵌入式项目。</p><h2 id="硬件、软件、固件"><a href="#硬件、软件、固件" class="headerlink" title="硬件、软件、固件"></a>硬件、软件、固件</h2><p><strong>硬件&#x3D;处理器（思考、支配身体）+存储器（记忆）+传感器（获取知觉）+执行器（执行动作）</strong></p><p><strong>软件&#x3D;数据（知识）+可执行代码（行为逻辑）+操作系统（神经系统）</strong></p><p><strong>固件：而它则是硬件和软件的桥梁，存储在非易失性存储器中的代码和数据，用于控制硬件设备的操作和功能。通常包括控制器上运行的低级别代码，用于初始化硬件、加载操作系统或直接执行控制功能</strong></p><h2 id="典型MCU结构与功能"><a href="#典型MCU结构与功能" class="headerlink" title="典型MCU结构与功能"></a>典型MCU结构与功能</h2><p><strong>一台完整的计算机由：处理器、存储器、I&#x2F;O（输入输出）组成</strong></p><h3 id="1-处理器："><a href="#1-处理器：" class="headerlink" title="1.处理器："></a>1.处理器：</h3><p>1.CPU:运算，控制，寄存</p><p>2.时钟&gt;定时器&gt;中断&gt;看门狗</p><p>(时钟提供计时基准&gt;定时器)&gt;（定时器用于生成精确的时间延迟&gt;达到设定值触发中断&gt;响应时钟间隔&gt;执行指定任务）&gt;（看门狗用于监控系统运行状态，防止死锁或系统崩溃）</p><p><strong>这其中看门狗非常形象，它需要产生的指定任务定时发任务给它</strong></p><h3 id="2-存储器："><a href="#2-存储器：" class="headerlink" title="2.存储器："></a>2.存储器：</h3><p>ROM(只读存储器：智能读取，在出厂前写定内容，无法修改) </p><p><strong>程序启动 内核功能调用</strong></p><p>SRAM(静态随机存储器：读写速度较快，断电丢失)</p><p><strong>存储运行时临时性数据</strong></p><p>FLASH（闪存：读写速度适中，断电不丢失）</p><p><strong>存储程序代码、存储数据、存储固件</strong></p><h3 id="3-I-O（输入-输出）"><a href="#3-I-O（输入-输出）" class="headerlink" title="3.I&#x2F;O（输入&#x2F;输出）:"></a>3.I&#x2F;O（输入&#x2F;输出）:</h3><p><strong>而I&#x2F;O口可以从外设接口和无线通信两方面来进行讲述</strong></p><h4 id="一、模拟量与数字量的概念："><a href="#一、模拟量与数字量的概念：" class="headerlink" title="一、模拟量与数字量的概念："></a>一、模拟量与数字量的概念：</h4><p>模拟量：语音、温度、速度、电压（<strong>连续变化的信号，在一定范围内取一切数值且可以无限细分</strong>、<strong>计算机不能直接处理</strong>）</p><p>数字量：电灯的开关、数字图像、时钟（<strong>离散的信号，在离散的信号中取值，有限的、特定的数值</strong>）</p><h4 id="二、转化"><a href="#二、转化" class="headerlink" title="二、转化"></a>二、转化</h4><p>单片机将模拟量<strong>采样量化</strong>成数字量，再通过<strong>逆量化滤波</strong>将数字量转化成模拟量</p><p>模拟量和数字量之间的转换涉及两个主要过程：模数转换（ADC）和数模转换（DAC）。</p><ol><li><p><strong>模数转换（ADC）</strong>：这是将模拟信号（连续信号）转换为数字信号（离散信号）的过程。这通常涉及以下步骤：</p><ul><li><strong>采样</strong>：在固定的时间间隔内测量模拟信号的幅度。</li><li><strong>量化</strong>：将每次采样的模拟值转换成最接近的数字级别。在这个过程中，由于数字信号的离散性质，可能会产生一些误差。</li><li><strong>编码</strong>：将量化的结果转换为二进制数。</li></ul></li><li><p><strong>数模转换（DAC）</strong>：这是将数字信号转换回模拟信号的过程。这个过程通常包括：</p><ul><li><strong>解码</strong>：将数字信号的二进制数转换为相应的模拟级别。</li><li><strong>平滑</strong>：使用模拟滤波器消除数字信号的阶梯状特征，使输出信号更加平滑，接近原始的模拟信号。</li></ul></li></ol><p>这两种转换在各种电子设备和系统中都非常重要，比如音频处理、数字通信、数据采集系统等。模数转换使我们能够以数字形式处理、存储和传输模拟信号，而数模转换则允许数字信号控制模拟设备或被模拟设备读取。</p><h4 id="三、单片机与外部"><a href="#三、单片机与外部" class="headerlink" title="三、单片机与外部"></a>三、单片机与外部</h4><h5 id="1-GPIO-通用输入-输出"><a href="#1-GPIO-通用输入-输出" class="headerlink" title="1.GPIO-通用输入&#x2F;输出"></a>1.GPIO-通用输入&#x2F;输出</h5><p>与外部设备进行数字通信，是连接外设和传感器的通用接口。</p><h5 id="2-PWM-脉冲宽度调制"><a href="#2-PWM-脉冲宽度调制" class="headerlink" title="2.PWM-脉冲宽度调制"></a>2.PWM-脉冲宽度调制</h5><p>用于产生模拟信号，如控制电机速度、调光LED等。</p><p>快速切换的高低电平（PWM）会被电机平均为对应占空比的比较平滑的模拟信号</p><h5 id="3-数字与模拟"><a href="#3-数字与模拟" class="headerlink" title="3.数字与模拟"></a>3.数字与模拟</h5><p>模&#x2F;数转换器(ADC) 将模拟信号转换为数字形式，用于从传感器中读取模拟数据。</p><p>数&#x2F;模转换器(DAC) 将数字信号转换为模拟信号，用于向执行器生成模拟输出。</p><h4 id="四、芯片与芯片（串口通信的方式）"><a href="#四、芯片与芯片（串口通信的方式）" class="headerlink" title="四、芯片与芯片（串口通信的方式）"></a>四、芯片与芯片（串口通信的方式）</h4><table><thead><tr><th></th><th>通信方式</th><th>从属关系</th><th>速度</th><th>应用</th></tr></thead><tbody><tr><td>UART-通用异步收发器</td><td>异步（时间差异）、全双工（各干各的）</td><td>点对点</td><td>20kbps-10mbps</td><td>与计算机连接，烧录调试程序</td></tr><tr><td>串行外设接口（SPI)</td><td>同步 全双工</td><td>用片选信号选择从机</td><td>≤10mbps</td><td>与存储器，屏幕连接</td></tr><tr><td>I’C总线(I’C)</td><td>同步 、半双工（说话时不能插嘴）</td><td>用地址选择从机</td><td>100kbps-3.4mbps</td><td>与各种传感器连接</td></tr></tbody></table><h4 id="五、单片机与单片机"><a href="#五、单片机与单片机" class="headerlink" title="五、单片机与单片机"></a><strong>五、单片机与单片机</strong></h4><table><thead><tr><th></th><th>通信范围</th><th>功耗要求</th><th>数据速率</th><th>设备密度</th></tr></thead><tbody><tr><td>Wi-Fi</td><td>受限</td><td>高</td><td>10mbps-1gbps</td><td>高</td></tr><tr><td>ZigBee</td><td>受限</td><td>低</td><td>s250kbps</td><td>高</td></tr><tr><td>NB-loT</td><td>广</td><td>低</td><td>≤250kbps</td><td>低</td></tr><tr><td>Bluetooth</td><td>受限</td><td>低</td><td>≤100mbps</td><td>低</td></tr><tr><td>LoRa</td><td>广</td><td>低</td><td>100bps-10kbps</td><td>低</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day10</title>
      <link href="/2024/01/10/Day10/"/>
      <url>/2024/01/10/Day10/</url>
      
        <content type="html"><![CDATA[<h1 id="在库迪咖啡体验摇咖啡的四个小时"><a href="#在库迪咖啡体验摇咖啡的四个小时" class="headerlink" title="在库迪咖啡体验摇咖啡的四个小时"></a>在库迪咖啡体验摇咖啡的四个小时</h1><h2 id="CLEAN-IS-EVERYTHING"><a href="#CLEAN-IS-EVERYTHING" class="headerlink" title="CLEAN IS EVERYTHING!"></a>CLEAN IS EVERYTHING!</h2><p>直到现在我的双脚依然在很疲惫，而我的双手充满了消毒水的味道</p><p>真的 做的最多的事情不是制作咖啡（反而是他们的清洁工作） 制作并不难 只要记熟了就简单 但是每次总是要去打泡后清洗</p><p>哎 今天真实体会到了实践出真知 只有好好读书 才能不用做那么痛苦的体力活</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设Week5</title>
      <link href="/2024/01/09/%E6%AF%95%E8%AE%BEWeek5/"/>
      <url>/2024/01/09/%E6%AF%95%E8%AE%BEWeek5/</url>
      
        <content type="html"><![CDATA[<h1 id="错误使人进步和慢工出细活"><a href="#错误使人进步和慢工出细活" class="headerlink" title="错误使人进步和慢工出细活"></a>错误使人进步和慢工出细活</h1><p>最近在学习和生活中出现的一些错误导致我产生了抗拒情绪，回头来思索时我认为这些错误使我产生了进步，正所谓：</p><p><em><strong>错误是不可避免的，但是不要重复错误—《周恩来选集》</strong></em></p><p>而对于一件事情，如果想要把它做好，那一定不能急躁和一味追求效率，是需要花时间静下心来去阅读论文和学习技术的，正所谓：</p><p><em><strong>soft fire makes sweet malt—慢工出细活</strong></em></p><h2 id="如何解决问题？"><a href="#如何解决问题？" class="headerlink" title="如何解决问题？"></a>如何解决问题？</h2><p>现在的我毕设开始遇到了困难，主要原因是我选择了利用Blynk平台作为收集和反馈我的数据，并将数据发送至手机端APP，这个东西说起来简单，但是实际运用和操作的时候最大的问题是在官网的配置和代码的使用。</p><p><strong>首先这个Blynk网站是全英的，阅读其官网文档对我来说虽然有翻译可以作为辅助，但是很大程度上它的配置并没有想象中的那么简单，对于它给出的一些库文件，甚至没有详细说明或者下载链接就一笔带过，同时它所支持的Board和我使用的UNO板以及它所提供的模块与我的ESP8266-01S可能存在有不兼容的情况</strong></p><p>所以当我把我的源码修修改改后总是会报错，可是我又不能从代码中找到修改的方法，现在的道路对我而言只有死磕这条路和寻求国内的其他方法，例如<strong>阿里云和百度云</strong>提供的这种类型的服务。</p><h2 id="未来方向是什么？"><a href="#未来方向是什么？" class="headerlink" title="未来方向是什么？"></a>未来方向是什么？</h2><p>现在是周二，周五会有一个开卷考试。</p><p>我打算在周三周四对那个课程进行一定复习工作，那么这个周的方向，我打算将其转换为先去完成人脸识别部分的功能，等这个功能实现后再去尝试对于线上部分的代码和开发。</p>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设Week4</title>
      <link href="/2024/01/04/%E6%AF%95%E8%AE%BEWeek4/"/>
      <url>/2024/01/04/%E6%AF%95%E8%AE%BEWeek4/</url>
      
        <content type="html"><![CDATA[<h1 id="全身心投入到毕设的制作"><a href="#全身心投入到毕设的制作" class="headerlink" title="全身心投入到毕设的制作"></a>全身心投入到毕设的制作</h1><p>距离上次发布的Week3已经过去了17天，回家处理了一些事情后，终于能投入到自己所喜欢的毕设项目里面。目前我的主要计划是在1.20号回家前能够完成整个硬件部分的任务，利用寒假的时间则是完成paper。</p><h2 id="目前的现状"><a href="#目前的现状" class="headerlink" title="目前的现状"></a>目前的现状</h2><p><strong>由于回家后没有太多时间来做我的事情，所以大部分的工作内容主要放在阅读文献和学习一些其他人的repo(代码仓库)</strong>  </p><p>现在回到学校后重新整理之前的几个问题就是：</p><ol><li><p>我已经获得了读卡器，也就是说现在可以先实现将带有AI的模型装到SD卡中，但是由于没有烧录器，还不好将这个模型烧录到K210中，不过<strong>这个烧录器已经在路上</strong>，也就是说下个周能够开始训练我的人脸模型</p></li><li><p>对于整个毕设的<strong>第二难度</strong>的问题（第一难度的问题是K210的人脸识别功能，但是我很有自信同时我坚信这一次我努力可以做到这个任务）是如何将外部模块接收到的数据传送到云端，再通过它作为中介最后发送到用户的手机上。</p><p>之前的时候考虑的方案是利用Blynk平台的免费版本实现将数据传输到其IoT平台上，再通过它在安卓手机上安装同样的软件，这样就能实现通过使用手机对其进行控制，同时在一定程度上减少app应用开发的难度</p><p>然而当初最开始在采购硬件的时候，我以为ESP8266开发板会意味着性能更佳，但实际上它已经是一个<strong>完整的微控制器</strong>系统，能够独立运行功能。</p></li></ol><h2 id="考虑的方案"><a href="#考虑的方案" class="headerlink" title="考虑的方案"></a>考虑的方案</h2><p><u>根据以上的现状分析，我打算首先完成对于云服务这一部分的内容</u></p><p>方案具体如下：</p><p>1.<strong>测试</strong>：在ESP01S模块还没有到之前，我需要直接利用ESP8266的开发板来测试将MQ2收集到的数据通过WIFI上传到云，在通过云服务器向手机端测试发送信息</p><p>2.<strong>将ESP8266结合Arduino UNO使用</strong>，Arduino Uno可以负责处理传感器数据和其他硬件交互，而ESP8266则负责处理网络通信，即MQ2发送数据这部分的工作直接给ESP8266开发板，两者之间使用串口通信，但是我觉得这个方案的实现有点杀鸡焉用牛刀。</p><p>3.等ESP01S模块和烧录器到了之后，再实现之前的功能，那么这个周的任务主要是<strong>测试app这部分的内容实现</strong></p><h2 id="未来的计划"><a href="#未来的计划" class="headerlink" title="未来的计划"></a>未来的计划</h2><p>1.对于后面没有使用到的<strong>ESP8266开发板</strong>可能考虑是否可以在整个项目中是实现一些其他功能</p><p>2.对于这个周也不是说再次混过去，我对于未来有个想法是在项目的OLED显示端，是否考虑引入<strong>旋钮</strong>的硬件，然后结合设计UI和一个简单的系统，实现通过旋钮能够实现其他更多选项和一些功能的实现</p><p>3.是否考虑再次引入语音识别功能，使其还能通过语音询问后给出一些数据和信息，我更偏向于希望这个项目能有更多的可能性，更贴近物联网<strong>服务于人</strong>的理念。</p><p><strong>更新 Process</strong>:现在已经签收了ESP01S模块和烧录器，那我还是首先选择先去做云服务器部分的内容（即完成将数据传送到云端，再将云端数据能够发送到手机端的任务）</p><h2 id="更新-issue（1-6-23-44-solved）"><a href="#更新-issue（1-6-23-44-solved）" class="headerlink" title="更新 issue（1.6&#x2F;23:44 solved）"></a>更新 issue（1.6&#x2F;23:44 solved）</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p><strong>1.ESP8266-01s通过杜邦线连接烧录器后，无法读取到端口。—&gt;这直接导致烧录软件无法搜索到端口</strong>—&gt;<strong>从而连烧录都无法进行</strong></p><p><strong>2.ESP8266-01S固件库无法正确烧录（ESP01SWIFI模块）—&gt;由于这个固件库无法烧录会导致后续整个对于UNO开发板接收到的数据无法发送至云服务器—&gt;直接卡住整个项目</strong></p><h3 id="解决途径："><a href="#解决途径：" class="headerlink" title="解决途径："></a>解决途径：</h3><h4 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a><strong>第一个问题</strong></h4><p>我首先考虑的是为什么无法读取到串口，这里我选择了重新安装串口驱动,以及谷歌、百度等试图寻找相关的类似解决方案，但是并不奏效。</p><p>这个时候我意识到应该<strong>先检查是烧录器的问题还是ESP8266的问题</strong>，这是一个简单的问题排查，那么这个时候我先找到了烧录器的官方文档，通过说明利用<strong>将TX和RX短接</strong>，在接入电脑后利用串口软件发送字符，很明显的观察到<strong>在烧录器上出现蓝灯显示，并且字符正常收到</strong>，这个时候打开电脑的设备管理器的时候发现很明显的出现的串口，说明不是烧录器的问题，考虑<strong>是否是接线问题</strong>，但是在这里我犯了一个<strong>致命的错误</strong>，并且深深地影响了后面长达数小时地反复寻找问题。</p><p>既然不是烧录器的问题，那么看来是我的ESP01S与烧录器进行连接的过程中出现的问题，根据与购买硬件的客服了解中我的烧录器只有6个接口，而01S（<strong>后面直接用01S来替代ESP8266-01S模块</strong>）的接口是8个，如果按照文档应该是每一个引脚都与之相对应的，但是客服却告诉我那只需要接4线，正是这种业余客服的回答加重了我问题解决的进度，实际上正是<strong>接线的原因导致的</strong>，<strong>而接线这个问题甚至后面也影响了我的第二个问题</strong>，烧录器只有6个接口，而01S是8个接口，实际上这里的解决方法是我<u>后面将烧录口的3.3V和GND通过杜邦线接到面包板后，再将那01S中多的两个接口接到面包板后，问题成功的解决，搜索到了端口。</u></p><h4 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a><strong>第二个问题</strong></h4><p>1.寻找购买元器件的淘宝客服，继续请求获得技术支持—&gt;由于现在是周末，技术不在线，只能等到周一且客服提出的建议非常有限，所以我选择自己继续死磕。</p><p>2.阅读客服发给我的硬件使用文档，在其中寻求解决方案—&gt;结果很显然的是这其中唯一有用的是使用手册，非常巧的是其中提到了关于无法烧录问题的解决，同时非常巧的是只给出了一个似乎是官网网站链接但是这个链接已经失效</p><p>3.<strong>一切出现了新的契机</strong>，正是这个链接给了我启发，根据一通寻找下我找到了该公司建立的论坛，而非常令人震撼的是这其中有开发资料，并且最新更新时间到了2020年（这说明这个公司还没有倒闭还在运行），因为这个原因我下载到了最新的烧录软件（该公司开发的第三方软件）和最新问题解决文档—&gt;但是阅读文档还是无法解决问题，其实我遇到了困难，我有点痛苦。</p><p>4.我开始从代码上来判断问题，当我每次利用第三方软件烧录的时候，总有个命令行终端同时出现，但是我之前并没有主要到这个东西，根据命令行显示<code>esp8266 chip sync error esp_sync_blocking.</code>（芯片同步错误）实际上这一行代码的出现以及带来了新的方向，同时也告诉<strong>我们学好英语多么的重要</strong>。</p><p>5.根据这行代码我开始尝试谷歌，希望在网络上能够有相似的问题出现和解决方法，最开始在Arduino社区和ESP32社区出现了类似的问题，这些问答基本上都是英语回答的，不过还好我有翻译插件，其中一个回答指向了<strong>COM端口的比特率是否和烧录器的比特率一致</strong>，这吓得我赶紧去查看，果然COM端口在电脑上默认是9600，可能是Arduino的原因—&gt;但是更改后仍然没有解决问题，我又受到了打击</p><p>6.继续在网络中寻找答案，<strong>我今天必须把这个问题解决</strong>，很多人都说CSDN这个国内社区里的内容都是屎里掏金，结果我在一篇学习分享中发现了一个重要的回答：**<u><em>凡是出现： Chip sync error: Failed to connect to ESP8266: Timed out waiting for packet header没有其他花里胡哨的！！！只有一个问题：就是接线错误！！！接线错误！！！接线错误！！！说三遍！！！如果是烧写模式选错了，烧写完成后固件不可用！！！</em></u>**</p><p>等等怎么和我的错误很相似</p><p><strong>正是这一个细节让我再次重新复查的时候发现，我的RX和TX这两个线的对接是错误的，错误地将RX与RX对接，TX和TX对接，正是这一个小小的错误导致整个烧录无法正常进行。</strong></p><p>那么为什么TX和RX要对应相接呢，其实这个是在学习单片机的时候就已经学习过的串口通信知识，但是因为知识长期没有回顾以及当时没有认真去学，所以在接线的时候没有去认真做好这一个事情。</p><p>简单来说<strong>RX代表接收，TX代表发送</strong>，为了实现两个设备间的通信，就必须将发送端连接到接收到，因为两个设备之间是会存在相互发送数据的，所以必须对应连接，如果接线错误就会导致错位，从而无法正确通信。</p><p>那么以上就是整个问题的解决回顾</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当出现这种问题的时候</p><p>首先考虑排除问题，特别是后期做到整个设备的联控的时候，更有可能出现这种细小问题导致的大问题，那么解决的关键就在于要学会去按照分部分来逐个排查问题，这样才能节约和利用好整个处理问题的时间和提高效率.</p><p>其次这种硬件上的问题，特别是接线上的问题的时候，除了排查软件部分即代码出现的问题，还要重新考虑是否是接线导致的，所以非常关键的一点就是对于平时的接线要做到慢准稳。在自动原理控制里我们说的是稳准快，而其中的核心就是要先稳，最后才追求的是快。</p><p>最后我想说的是遇到问题并不可怕，解决问题也没有想象中的那么困难，在今年我始终坚信的一点是<strong>要相信自己，并且不轻易放弃</strong>。为什么？心态非常的重要，不仅是对处理问题，对于整个人的人生也会有非常之重要的左右，在我以前阅读的书籍中很多时候已经提到，心态有时候甚至会决定一个人一生的命运或是成功，忧患惆怅或者急躁之人终不会成就大事，只有处波澜之中仍然处乱不惊的人方能成就之伟业。</p>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day9</title>
      <link href="/2024/01/03/Day9/"/>
      <url>/2024/01/03/Day9/</url>
      
        <content type="html"><![CDATA[<h1 id="BACK-TO-BACK"><a href="#BACK-TO-BACK" class="headerlink" title="BACK TO BACK"></a><strong>BACK TO BACK</strong></h1><p>终于回到学校，接下来是认真完成各种考试和报告，以及在放假前把整个毕设的基本硬件部分给完成。</p><h1 id="Work-Hard"><a href="#Work-Hard" class="headerlink" title="Work Hard"></a>Work Hard</h1><p>在整个寒假以及过年之前的任务就是主要去完成毕业论文的写作。</p><p>我觉得我最需要的就是把自己的整个状态调整为克服懒惰 让自己总是学着去做一些对生活和学习有正方向的事情。这些事情可以是学习知识，可以是阅读书籍，可以是欣赏一些电影，但是我不想再去看那些集数太长的番剧或者电视剧。更多的是结合自己的爱好和兴趣去做一些有一些意义的事情。</p><p>比如说现在我正在一门意义并不大的专业选修课上，但是我没有浪费时间去浏览一些没有营养的短视频或者花边新闻。I DON’T CARE ABOUT THESE PEOPLE… 而我把事情转换到了打开WORD文档，把我想写的先写来最后再回去后PULL到我的Blog上。</p><h1 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h1><p>最后我觉得很多事情没必要在分享在朋友圈，特别是文字类的自我感想，只需要分享图片就可以了。</p><p>努力吧 今年 好好地 认真地 去做好每一件事</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设Week3</title>
      <link href="/2023/12/17/%E6%AF%95%E8%AE%BEWeek3/"/>
      <url>/2023/12/17/%E6%AF%95%E8%AE%BEWeek3/</url>
      
        <content type="html"><![CDATA[<h1 id="因考研将进度推迟一段时间"><a href="#因考研将进度推迟一段时间" class="headerlink" title="因考研将进度推迟一段时间"></a>因考研将进度推迟一段时间</h1><p>目前是模块已经齐全 对于整个系统最核心的摄像头模块 也已经购买了K210摄像头模块 打算等考完后再去深入研究</p><p>而如果按照接下来的进度就是处理以下几个问题：</p><p><u>1.将数据通过ESP8266模块结合WIFI功能传送到IoT平台，对于IoT平台的数据再实时反馈到手机上，如果有出现数据异常的情况，则及时提醒手机用户。</u></p><p><u>2.实现摄像头部分的代码，以及人脸库的训练，从而完成通过机器识别人脸与信息库进行比对，如果数据异常，则通过Arduino部分将信息反馈到IoT平台后传送到手机端</u></p><p><u>3.最终能够通过手机WIFI控制下位机的报警装置的开关</u></p><p><u>4.进行整个系统联调。</u></p><p>按照整个项目的进度，大概在1月20号之前应该完整基本初步功能的实现</p><h1 id="续更："><a href="#续更：" class="headerlink" title="续更："></a><strong>续更</strong>：</h1><p>目前根据对官方K210文档进行研究发现，如果要实现对于人脸识别功能的话，在硬件方面我还需要<strong>一个USB转TTL模块</strong>，之所以用到这个模块是因为</p><p>1.为了更好的实现Arduino和K210模块之间的串口通信</p><p>2.数据传输：USB转TTL模块可以帮助Arduino板通过串口接收来自K210摄像头模块的数据。整个流程是：将摄像头捕获的图像进行处理后，再通过串口将结果反馈给Arduino，再通过Arduino的ESP8266发送至云服务端，最后通过云服务端传送到用户的手机上</p><p><strong>不过除此之外我还需要一个读卡器。</strong>这需要借助读卡器来将带有AI的模型装到SD卡中</p><p>根据官方文档来说，如果要实现人脸识别需要的就是</p><h2 id="一-实验接线"><a href="#一-实验接线" class="headerlink" title="一.实验接线"></a><strong>一.实验接线</strong></h2><table><thead><tr><th align="center">Arduino</th><th align="center">USB</th></tr></thead><tbody><tr><td align="center">TXD</td><td align="center">RXD</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr></tbody></table><table><thead><tr><th align="center">Arduino</th><th align="center">k210</th></tr></thead><tbody><tr><td align="center">RXD</td><td align="center">TXD</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr><tr><td align="center">VCC</td><td align="center">5V</td></tr></tbody></table><h2 id="二-连线图演示："><a href="#二-连线图演示：" class="headerlink" title="二.连线图演示："></a>二.连线图演示：</h2><p>这里我给一个嵌入图片 如果网速加载的好可能会流畅显示</p><p><a href="https://www.yahboom.com/public/upload/upload-html/1697529742/2023060600006.png![](https://www.yahboom.com/public/upload/upload-html/1697529742/2023060600006.png)">https://www.yahboom.com/public/upload/upload-html/1697529742/2023060600006.png![](https://www.yahboom.com/public/upload/upload-html/1697529742/2023060600006.png)</a></p><h2 id="三-代码示例"><a href="#三-代码示例" class="headerlink" title="三.代码示例"></a>三.代码示例</h2><p>这只是官方文档给出的基础示例代码（为了方便后续进行修改的时候 不用去找范例 我把它POST在这）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (K210Serial.<span class="built_in">available</span>()) </span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">recv_k210msg</span>(K210Serial.<span class="built_in">read</span>());</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (k210_msg.class_n != <span class="number">0</span>)<span class="comment">//例程号不为空</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(k210_msg.class_n == <span class="number">8</span>)<span class="comment">//是人脸识别</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">sprintf</span>(buff_com,<span class="string">&quot;x=%d,y=%d,w=%d,h=%d\r\n&quot;</span>,k210_msg.x,k210_msg.y,k210_msg.w,k210_msg.h);</span><br><span class="line">          K210Serial.<span class="built_in">print</span>(buff_com);</span><br><span class="line">​</span><br><span class="line">           <span class="keyword">if</span>(k210_msg.id == <span class="string">&#x27;Y&#x27;</span> || k210_msg.id == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(buff_com,<span class="string">&quot;Yes\r\n&quot;</span>);</span><br><span class="line">            K210Serial.<span class="built_in">print</span>(buff_com);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(buff_com,<span class="string">&quot;NO\r\n&quot;</span>);</span><br><span class="line">            K210Serial.<span class="built_in">print</span>(buff_com);</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          k210_msg.class_n = <span class="number">0</span>;<span class="comment">//清除例程号  </span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上的程序，如果是跑这个例程，k210_msg结构体的成员就有对应的值，并通过串口打印处理</p><p>k210_msg:是接收信息的结构体，它的主要成员有</p><ul><li>x：是识别出来框左上角的横坐标（范围：0-240）</li><li>y：是识别出来框左上角的纵坐标（范围：0-320）</li><li>w：是识别出来框的宽度（范围：0-240）</li><li>h：是识别出来框的长度（范围：0-320）</li><li>id:是识别出来的标签</li><li>class_n:例程编号</li><li>msg_msg[20]:有效数据</li></ul><p>经过数据接收的函数并处理，k210_msg的每个成员都会存储到有效信息，如果想要二次开发，直接调用就k210_msg的成员就可以了</p><h2 id="四-实验现象"><a href="#四-实验现象" class="headerlink" title="四.实验现象"></a>四.实验现象</h2><p><u>1.完成接线 通过按键记录人脸</u></p><p><u>2.将串口助手设定好同一个波特率</u></p><p><u>3.跑上面的历程，然后XCOM串口助手则会反馈 YES或者NO</u> </p><h2 id="五-总结"><a href="#五-总结" class="headerlink" title="五,总结"></a>五,总结</h2><p>所以如果要完整整个毕设，在当下来看<strong>关键点</strong>为：</p><p>1.在人脸识别部分的模块需要重写，不仅需要满足能过通过训练出的模型与检测到的人脸进行成功对比，还需要将得到的信息通过串口反馈给Arduino,再通过Arduino利用ESP8266模块的WIFI将数据传送到IoT云服务端,通过云服务端能够向用户反馈是否出现了陌生人识别错误的情况，通过在下位机端要对其进行报警。</p><p>2.对于蜂鸣器的报警或许也要对其两种不同的情况进行区分，一种是当烟雾浓度过高的报警，一种是陌生人侵入时的报警，这两种报警方式可以根据鸣笛的时间长短不同来进行区别。</p><p>3.IOT云服务器端，在这里需要的就是处理两个信息，一是来自于烟雾传感器的浓度过高信息报警反馈到手机端，二是对于人脸信息不匹配时的将警报预警信息反馈到手机。</p><p>4.从手机端对其警报器进行控制。</p><p>目前而言需要解决的就以下几个问题 虽然进度上现在暂时停滞 但是我会后面尽快的赶上来</p>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设材料清单</title>
      <link href="/2023/12/12/%E6%AF%95%E8%AE%BE%E6%9D%90%E6%96%99%E6%B8%85%E5%8D%95/"/>
      <url>/2023/12/12/%E6%AF%95%E8%AE%BE%E6%9D%90%E6%96%99%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="以下是完整的整个毕设课题材料的清单"><a href="#以下是完整的整个毕设课题材料的清单" class="headerlink" title="以下是完整的整个毕设课题材料的清单"></a>以下是完整的整个毕设课题材料的清单</h1><p>如果后续有其他更新会在这里</p><table><thead><tr><th align="center"></th><th align="center">数量</th><th align="center">价格</th></tr></thead><tbody><tr><td align="center">气体传感器MQ-2</td><td align="center">2</td><td align="center">15.28</td></tr><tr><td align="center">显示屏SPI 0.96寸</td><td align="center">1</td><td align="center">8.7</td></tr><tr><td align="center">杜邦线</td><td align="center">40</td><td align="center">1.7</td></tr><tr><td align="center">ESP8266开发板</td><td align="center">1</td><td align="center">11.4</td></tr><tr><td align="center">蜂鸣器</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">塑料盒</td><td align="center">1</td><td align="center">4.3</td></tr><tr><td align="center">面包板</td><td align="center">2</td><td align="center">7.55</td></tr><tr><td align="center">Arduino Uno开发板</td><td align="center">1</td><td align="center">25.8</td></tr><tr><td align="center">K210视觉识别模块</td><td align="center">1</td><td align="center">245</td></tr><tr><td align="center">串口下载器</td><td align="center">1</td><td align="center">5.57</td></tr><tr><td align="center">ESP01S串口</td><td align="center">1</td><td align="center">5.20</td></tr><tr><td align="center">合计</td><td align="center"></td><td align="center">331.5</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设Week2</title>
      <link href="/2023/12/09/%E6%AF%95%E8%AE%BEWeek2/"/>
      <url>/2023/12/09/%E6%AF%95%E8%AE%BEWeek2/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设Week2-对于MQ2传感器检测数值的实验反馈"><a href="#毕设Week2-对于MQ2传感器检测数值的实验反馈" class="headerlink" title="毕设Week2-对于MQ2传感器检测数值的实验反馈"></a>毕设Week2-对于MQ2传感器检测数值的实验反馈</h1><h2 id="一-进度反馈："><a href="#一-进度反馈：" class="headerlink" title="一.进度反馈："></a>一.进度反馈：</h2><h3 id="1-材料以及陆续到齐-（除摄像头模块）"><a href="#1-材料以及陆续到齐-（除摄像头模块）" class="headerlink" title="1.材料以及陆续到齐 （除摄像头模块）"></a><u>1.材料以及陆续到齐</u> （除摄像头模块）</h3><h3 id="2-对于代码的调试有了新的进展"><a href="#2-对于代码的调试有了新的进展" class="headerlink" title="2.对于代码的调试有了新的进展"></a><u>2.对于代码的调试有了新的进展</u></h3><h3 id="3-对于第一部分可以完全实现其功能"><a href="#3-对于第一部分可以完全实现其功能" class="headerlink" title="3.对于第一部分可以完全实现其功能"></a><u>3.对于第一部分可以完全实现其功能</u></h3><h3 id="4-对于摄像头的选取和方法还需要进一步研究（这需要从经济和性能方面考究）"><a href="#4-对于摄像头的选取和方法还需要进一步研究（这需要从经济和性能方面考究）" class="headerlink" title="4.对于摄像头的选取和方法还需要进一步研究（这需要从经济和性能方面考究）"></a><u>4.对于摄像头的选取和方法还需要进一步研究</u>（这需要从经济和性能方面考究）</h3><h2 id="二-硬件与代码结合的烟雾监测实验"><a href="#二-硬件与代码结合的烟雾监测实验" class="headerlink" title="二.硬件与代码结合的烟雾监测实验"></a>二.硬件与代码结合的烟雾监测实验</h2><p>根据第一周编写的烟雾监测部分代码，通过硬件演示发现在现场并无烟雾的情况下，通过AO口监测到的实时数据维持在290-300附近，并且由于设定值为40，故设定的LED灯出现闪烁情况。</p><p>所以根据实验情况，将阈值更改为300后，进行第二次烟雾监测发现，此时通过串口显示数值增加至240左右后开始出现数据下降的情况最后数据维持在20-22之间，而此时现场中并没有烟雾.根据这一数据监测，我目前大致收集到在正常没有烟雾的环境中，MQ-2的气体数值在16-25之间。</p><p>现在我需要利用香烟做烟雾检测，来设定出合适的报警阈值。</p><p>根据两次实验反馈，当香烟点燃，并且开始出现有烟雾的情况下，烟雾报警器的数值通过串口显示器开始不断攀升，最终达到235，除此之外当香烟不再出现明显的烟雾时，空气中检测到的数值仍然维持在230-235左右，最后通过用手挥散周围空气的途径，监测数值恢复到12，并维持在该数值附近。</p><p><strong>结论</strong>：</p><p>1.<u>如果在厨房等对烟雾需要敏感监测的环境中，要对出现轻微烟雾的情况，比如香烟等物质进行监测时，应该将阈值设置在200，当传感器读数超过该阈值时，则通过蜂鸣器进行警报，以及信号灯闪烁的形式。</u></p><p>2.根据多次实验的检测，以下数据的收集表</p><table><thead><tr><th align="center">烟雾模块检测数据</th><th align="center">香烟点燃情况</th><th align="center">检测到的模拟值</th></tr></thead><tbody><tr><td align="center">第一次实验</td><td align="center">点燃但无烟雾初期</td><td align="center">211</td></tr><tr><td align="center">第二次实验</td><td align="center">完全熄灭状态</td><td align="center">12</td></tr><tr><td align="center">第三次实验</td><td align="center">点燃但无烟雾末期</td><td align="center">235</td></tr><tr><td align="center">第四次实验</td><td align="center">点燃有烟雾</td><td align="center">230</td></tr><tr><td align="center">第五次实验</td><td align="center">点燃有烟雾</td><td align="center">234</td></tr></tbody></table><p>3.传感器模块数据与电压之间的关系：</p><p>由于Arduino Uno的模拟输入引脚通过内置的模拟-数字转换器（ADC）将输入的电压转换为0至1023之间的数字值。Arduino Uno的ADC为10位，这意味着它可以表示2的10次方&#x3D;1024个不同的值。Arduino的输入电压是5V，这意味着每个模拟读数单位代表的电压大约是5<em>V</em>&#x2F;1024≈0.00488<em>V</em>（4.88mV）。</p><p>将模拟读数转换为实际的电压值，利用公式：</p><p><em><em>电压值&#x3D;模拟读数</em>(5v&#x2F;1024)</em>*</p><p>根据实验反馈当无烟雾时模拟数值为12，那么对应的电压大约为：12×0.00488<em>V</em>≈0.05856<em>V</em></p><p>当点燃但无明显烟雾初期，对应的电压为1.0296V</p><p>当有明显的烟雾时，读数为230-235之间，根据计算对应的电压大约为：1.1377V</p><p>最后通过厂家的说明书得知当电压处于0.1-0.3V时表示相对无污染，而高浓度时电压为4V左右，实验数据反映出在无烟雾的环境下电压接近0.05856V，这确实处于低污染的范围内。而在有烟雾的情况下，电压值在1.1V左右，说明传感器检测到了一定程度的气体浓度增加，同时代码正常运作（不过由于当时我的阈值在检测的时候仍然设定为300，所以在视频和图片演示中，没有出现闪烁的情况）。</p><p><strong>关于烟雾检测的代码修改如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> MQ2Pin = A0; <span class="comment">// MQ-2传感器连接的模拟输入引脚</span></span><br><span class="line"><span class="type">int</span> LED = <span class="number">13</span>; <span class="comment">// LED灯连接到数字引脚8</span></span><br><span class="line"><span class="type">int</span> threshold = <span class="number">200</span>; <span class="comment">// 设定的气体浓度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pinMode</span>(LED, OUTPUT); <span class="comment">// 设置LED引脚为输出模式</span></span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);   <span class="comment">// 开始串口通信</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sensorValue = <span class="built_in">analogRead</span>(MQ2Pin); <span class="comment">// 读取传感器值</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(sensorValue);          <span class="comment">// 输出传感器值到串口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sensorValue &gt; threshold) &#123;</span><br><span class="line">        <span class="comment">// 如果传感器读数超过阈值，LED灯连续闪烁</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(LED, HIGH);   <span class="comment">// 打开LED灯</span></span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);                <span class="comment">// 延时500毫秒</span></span><br><span class="line">        <span class="built_in">digitalWrite</span>(LED, LOW);    <span class="comment">// 关闭LED灯</span></span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);                <span class="comment">// 延时500毫秒</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">digitalWrite</span>(LED, LOW);    <span class="comment">// 如果没有超过阈值，保持LED灯关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三-将数据通过OLED显示屏进行实时反馈监测"><a href="#三-将数据通过OLED显示屏进行实时反馈监测" class="headerlink" title="三.将数据通过OLED显示屏进行实时反馈监测"></a>三.将数据通过OLED显示屏进行实时反馈监测</h2><p><strong>硬件连接</strong>：</p><p>按照OLED模块说明书，将对应的引脚按照SCL&#x3D;13 SDA&#x3D;11 RES&#x3D;8 DC&#x3D;9 CS&#x3D;10的方式，将OLED直接连接到开发板上，而VCC和GND则通过面包板，将OLED模块和MQ2模块一并连接。</p><p><u><strong>实现功能：为读取MQ-2传感器值并将数据传到OLED显示屏上，通过OLED显示屏实时反应监测到的数据，并且能够一秒钟显示一个数据</strong></u></p><p>所以将代码修改为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Ucglib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义MQ-2传感器和LED</span></span><br><span class="line"><span class="type">int</span> MQ2Pin = A0; <span class="comment">// MQ-2传感器连接的模拟输入引脚</span></span><br><span class="line"><span class="type">int</span> LED = <span class="number">13</span>; <span class="comment">// 使用Arduino板上的内置LED</span></span><br><span class="line"><span class="type">int</span> threshold = <span class="number">200</span>; <span class="comment">// 设定的气体浓度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义OLED显示屏连接的引脚</span></span><br><span class="line"><span class="function">Ucglib_ST7735_18x128x160_SWSPI <span class="title">ucg</span><span class="params">(<span class="comment">/*sclk=*/</span> <span class="number">13</span>, <span class="comment">/*data=*/</span> <span class="number">11</span>, <span class="comment">/*cd=*/</span> <span class="number">9</span>, <span class="comment">/*cs=*/</span> <span class="number">10</span>, <span class="comment">/*reset=*/</span> <span class="number">8</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化LED和串口</span></span><br><span class="line">  <span class="built_in">pinMode</span>(LED, OUTPUT);</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化OLED显示屏</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>); <span class="comment">// 等待硬件准备就绪</span></span><br><span class="line">  ucg.<span class="built_in">begin</span>(UCG_FONT_MODE_TRANSPARENT);</span><br><span class="line">  ucg.<span class="built_in">clearScreen</span>();</span><br><span class="line">  <span class="comment">//ucg.setRotate90(); // 设置屏幕为横向显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 读取MQ-2传感器值并打印到串口</span></span><br><span class="line">  <span class="type">int</span> sensorValue = <span class="built_in">analogRead</span>(MQ2Pin);</span><br><span class="line">  Serial.<span class="built_in">println</span>(sensorValue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否超过阈值，并控制LED</span></span><br><span class="line">  <span class="keyword">if</span> (sensorValue &gt; threshold) &#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, HIGH);   <span class="comment">// 打开LED灯</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);                <span class="comment">// 延时</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, LOW);    <span class="comment">// 关闭LED灯</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);                <span class="comment">// 延时</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, LOW);    <span class="comment">// 关闭LED</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置OLED屏幕的字体和颜色</span></span><br><span class="line">  ucg.<span class="built_in">setFont</span>(ucg_font_ncenR12_tr);</span><br><span class="line">  ucg.<span class="built_in">setColor</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除屏幕并设置打印位置</span></span><br><span class="line">  ucg.<span class="built_in">clearScreen</span>();</span><br><span class="line">  ucg.<span class="built_in">setPrintPos</span>(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印实时数据到OLED屏幕</span></span><br><span class="line">  ucg.<span class="built_in">print</span>(sensorValue);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>); <span class="comment">// 等待一段时间再刷新屏幕</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是在实际过程中，出现了很明显的数据显示不全或没有的情况，而使用示例代码打印HELLO WORLD时则是正常的 对于OLED这部分代码我还需要进行修改 或考虑为是否接触不良</p><h2 id="四-引入蜂鸣报警器"><a href="#四-引入蜂鸣报警器" class="headerlink" title="四.引入蜂鸣报警器"></a>四.引入蜂鸣报警器</h2><p><u><strong>利用低电平触发蜂鸣报警器，实现当MQ2烟雾传感器模块监测数据超过阈值时发出报警，而当数值低于阈值时则不发出报警的功能。</strong></u></p><p><strong>硬件连接</strong>：将IO模拟口接到D2引脚，将VCC和GND按正常连接</p><p>修改代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Ucglib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义MQ-2传感器、LED和蜂鸣器</span></span><br><span class="line"><span class="type">int</span> MQ2Pin = A0; <span class="comment">// MQ-2传感器连接的模拟输入引脚</span></span><br><span class="line"><span class="type">int</span> LED = <span class="number">13</span>; <span class="comment">// 使用Arduino板上的内置LED</span></span><br><span class="line"><span class="type">int</span> buzzer = <span class="number">2</span>; <span class="comment">// 蜂鸣器连接到数字引脚D2</span></span><br><span class="line"><span class="type">int</span> threshold = <span class="number">200</span>; <span class="comment">// 设定的气体浓度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义OLED显示屏连接的引脚</span></span><br><span class="line"><span class="function">Ucglib_ST7735_18x128x160_SWSPI <span class="title">ucg</span><span class="params">(<span class="comment">/*sclk=*/</span> <span class="number">13</span>, <span class="comment">/*data=*/</span> <span class="number">11</span>, <span class="comment">/*cd=*/</span> <span class="number">9</span>, <span class="comment">/*cs=*/</span> <span class="number">10</span>, <span class="comment">/*reset=*/</span> <span class="number">8</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化LED、串口和蜂鸣器</span></span><br><span class="line">  <span class="built_in">pinMode</span>(LED, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(buzzer, OUTPUT);</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化OLED显示屏</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  ucg.<span class="built_in">begin</span>(UCG_FONT_MODE_TRANSPARENT);</span><br><span class="line">  ucg.<span class="built_in">clearScreen</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 读取MQ-2传感器值并打印到串口</span></span><br><span class="line">  <span class="type">int</span> sensorValue = <span class="built_in">analogRead</span>(MQ2Pin);</span><br><span class="line">  Serial.<span class="built_in">println</span>(sensorValue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否超过阈值，并控制LED和蜂鸣器</span></span><br><span class="line">  <span class="keyword">if</span> (sensorValue &gt; threshold) &#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, HIGH); <span class="comment">// 打开LED灯</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(buzzer, LOW); <span class="comment">// 激活蜂鸣器（低电平触发）</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, LOW); <span class="comment">// 关闭LED灯</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(buzzer, HIGH); <span class="comment">// 关闭蜂鸣器</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, LOW); <span class="comment">// 关闭LED</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(buzzer, HIGH); <span class="comment">// 确保蜂鸣器关闭</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新OLED屏幕显示</span></span><br><span class="line">  ucg.<span class="built_in">clearScreen</span>();</span><br><span class="line">  ucg.<span class="built_in">setPrintPos</span>(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">  ucg.<span class="built_in">print</span>(sensorValue);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>); <span class="comment">// 等待一秒钟</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><u>经过检测，该功能正常实现，当超过阈值时，蜂鸣器能正常发出报警声，当数据低于阈值时，蜂鸣器不发出报警。</u></strong></p><h2 id="五-反思和下一阶段任务"><a href="#五-反思和下一阶段任务" class="headerlink" title="五.反思和下一阶段任务"></a>五.反思和下一阶段任务</h2><p><strong>通过这个周的工作，目前初步解决第一个问题，即烟雾报警器的监测和蜂鸣报警器的功能实现，以及显示屏的初步调整。</strong></p><h3 id="目前问题如下："><a href="#目前问题如下：" class="headerlink" title="目前问题如下："></a>目前问题如下：</h3><p>1.显示屏不能正常显示通过传感器监测到的数据，并按照每秒显示一次数据的形式</p><p>2.是否考虑为设置的字体大小不恰当，以及显示信息的坐标不合理。</p><h3 id="下一阶段任务："><a href="#下一阶段任务：" class="headerlink" title="下一阶段任务："></a>下一阶段任务：</h3><p>1.如何通过ESP8266模块，将信息上传至云平台对数据有着更为方便的监测和管理，以及实现对于数据通过何种形式对用户能够起到反馈作用，是否考虑为基于Kotlin语言开发出安卓应用，通过WIFI的形式，将数据反馈到手机上，并能通过手机对上位机做出何种操作反馈。</p><p>2.如何实现其通过摄像头模块来进行人脸识别功能，是否考虑为使用OV7670摄像头模块结合Python Cv实现人脸检测或是利用成本更贵的Open Mv结合Python语言进行人脸检测功能</p><p><strong>根据资料收集的结果是：</strong></p><p>基于Arduino的处理能力和内存限制，传统的人脸检测算法，例如OpenCV中的Haar特征级联分类器，通常需要较高的计算能力，这超出了大多数Arduino板的能力范围。</p><p><strong>方法一：</strong>考虑为：使用专门的硬件模块：例如OpenMV Cam或Pixy Cam，在这些模块中内置了用于图像处理和人脸检测的专用硬件和软件。</p><p>如果是：</p><ol><li><strong>OpenMV Cam</strong>：这是一个小型的低功耗摄像头模块，配备了强大的ARM Cortex M7处理器，能够运行简单的人脸检测算法。</li><li><strong>Pixy Cam</strong>：Pixy是一个快速的视觉传感器，可以轻松地集成到各种项目中，包括Arduino项目。它可以用于检测特定颜色的物体，但进行复杂的图像识别（如人脸检测）可能有限。</li></ol><p><strong>方法二：</strong>为结合Arduino和树莓派，因为树莓派的功能更强大，同时国产树莓派例如香蕉派这种的价格并不是很贵，可以通过树莓派上运行OpenCV处理图像识别和人脸检测的任务，并通过串口或网络将检测结果发送给Arduino。Arduino随后可以根据这些信息控制电机、LED或其他设备。</p><p><strong>方法三：</strong>使用价格更为便宜的OV7670摄像头模块结合Python和OpenCV，但是不是直接通过Arduino实现的。OV7670的低成本低，但它本身不包含进行图像处理或人脸检测的处理器。因此，还需要需要一个中间设备（如树莓派或PC）来处理从OV7670摄像头捕获的图像。</p><p><strong><u>基于目前的工作进度还有很多需要去实现和做到的功能，不过我会尽我的努力去实现！</u></strong></p><h2 id="补充：今晚临时加班，重新对显示屏部分代码进行修改和调整，现在能正常打印出传感器数值以及英文文字，要想打印出中文，还需要借助取模软件。"><a href="#补充：今晚临时加班，重新对显示屏部分代码进行修改和调整，现在能正常打印出传感器数值以及英文文字，要想打印出中文，还需要借助取模软件。" class="headerlink" title="补充：今晚临时加班，重新对显示屏部分代码进行修改和调整，现在能正常打印出传感器数值以及英文文字，要想打印出中文，还需要借助取模软件。"></a>补充：今晚临时加班，重新对显示屏部分代码进行修改和调整，现在能正常打印出传感器数值以及英文文字，要想打印出中文，还需要借助取模软件。</h2><p>通过创建一个包含文本和数值的字符串，调整字体大小和字符串显示坐标，最后使它呈现在屏幕上。</p><p>在这其中有两行比较关键的代码，我在下面做出一定的解释：</p><p><code>String displayStr = &quot;Smoke Level: &quot; + String(sensorValue);</code></p><ul><li>这一行创建了一个新的 <code>String</code> 对象，名为 <code>displayStr</code>。</li><li><code>&quot;Smoke Level: &quot;</code> 是一个字符串文字，它是这个新字符串的开始部分。</li><li><code>String(sensorValue)</code> 将整数 <code>sensorValue</code> 转换成一个 <code>String</code> 对象。这是必要的，因为在Arduino的C++中，不能直接将字符串和整数用 <code>+</code> 运算符相加。转换为 <code>String</code> 对象后，就可以使用 <code>+</code> 运算符将它们连接起来。</li><li>这行代码的结果是一个包含了 “Smoke Level: “ 文本和 <code>sensorValue</code> 数值（转换为字符串形式）的新字符串。</li></ul><p><code>ucg.print(displayStr.c_str());</code></p><ul><li><p><code>ucg.print()</code> 函数用于在Ucglib控制的显示屏上显示文本。</p></li><li><p><code>displayStr.c_str()</code> 调用 <code>String</code> 对象的 <code>c_str()</code> 方法，这将 <code>String</code> 对象转换为一个C风格的字符串（即一个以null结尾的字符数组）。<code>Ucglib</code> 的 <code>print()</code> 函数需要这种类型的字符串作为参数。</p></li><li><p>这行代码的作用是在屏幕上打印出 <code>displayStr</code> 中的内容。</p><h3 id="最后经过调整的完整第一部分代码如下："><a href="#最后经过调整的完整第一部分代码如下：" class="headerlink" title="最后经过调整的完整第一部分代码如下："></a>最后经过调整的完整第一部分代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Ucglib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义MQ-2传感器、LED和蜂鸣器</span></span><br><span class="line"><span class="type">int</span> MQ2Pin = A0; <span class="comment">// MQ-2传感器连接的模拟输入引脚</span></span><br><span class="line"><span class="type">int</span> LED = <span class="number">13</span>; <span class="comment">// 使用Arduino板上的内置LED</span></span><br><span class="line"><span class="type">int</span> buzzer = <span class="number">2</span>; <span class="comment">// 蜂鸣器连接到数字引脚D2</span></span><br><span class="line"><span class="type">int</span> threshold = <span class="number">200</span>; <span class="comment">// 设定的气体浓度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义OLED显示屏连接的引脚</span></span><br><span class="line"><span class="function">Ucglib_ST7735_18x128x160_SWSPI <span class="title">ucg</span><span class="params">(<span class="comment">/*sclk=*/</span> <span class="number">13</span>, <span class="comment">/*data=*/</span> <span class="number">11</span>, <span class="comment">/*cd=*/</span> <span class="number">9</span>, <span class="comment">/*cs=*/</span> <span class="number">10</span>, <span class="comment">/*reset=*/</span> <span class="number">8</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化LED、串口和蜂鸣器</span></span><br><span class="line">  <span class="built_in">pinMode</span>(LED, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(buzzer, OUTPUT);</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化OLED显示屏</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  ucg.<span class="built_in">begin</span>(UCG_FONT_MODE_TRANSPARENT);</span><br><span class="line">  ucg.<span class="built_in">clearScreen</span>();</span><br><span class="line">  ucg.<span class="built_in">setRotate90</span>(); <span class="comment">// 将屏幕旋转90度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 读取MQ-2传感器值并打印到串口</span></span><br><span class="line">  <span class="type">int</span> sensorValue = <span class="built_in">analogRead</span>(MQ2Pin);</span><br><span class="line">  Serial.<span class="built_in">println</span>(sensorValue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否超过阈值，并控制LED和蜂鸣器</span></span><br><span class="line">  <span class="keyword">if</span> (sensorValue &gt; threshold) &#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, HIGH); <span class="comment">// 打开LED灯</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(buzzer, LOW); <span class="comment">// 激活蜂鸣器（低电平触发）</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, LOW); <span class="comment">// 关闭LED灯</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(buzzer, HIGH); <span class="comment">// 关闭蜂鸣器</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED, LOW); <span class="comment">// 关闭LED</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(buzzer, HIGH); <span class="comment">// 确保蜂鸣器关闭</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新OLED屏幕显示</span></span><br><span class="line">  ucg.<span class="built_in">clearScreen</span>();</span><br><span class="line">  ucg.<span class="built_in">setFont</span>(ucg_font_ncenB12_hr);</span><br><span class="line">  ucg.<span class="built_in">setColor</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  ucg.<span class="built_in">setPrintPos</span>(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">  String displayStr = <span class="string">&quot;Smoke Level: &quot;</span> + <span class="built_in">String</span>(sensorValue);</span><br><span class="line">  ucg.<span class="built_in">print</span>(displayStr.<span class="built_in">c_str</span>()); </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>); <span class="comment">// 等待一秒钟</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day8</title>
      <link href="/2023/12/03/Day8/"/>
      <url>/2023/12/03/Day8/</url>
      
        <content type="html"><![CDATA[<h1 id="教练我要疯狂学习代码"><a href="#教练我要疯狂学习代码" class="headerlink" title="教练我要疯狂学习代码"></a>教练我要疯狂学习代码</h1><p> Code and Cook(basically refer to music) is the things I will learn for my all life… DO IT PLZ </p><p><a href="https://ooo.0x0.ooo/2023/12/03/OABhwp.jpg">https://ooo.0x0.ooo/2023/12/03/OABhwp.jpg</a></p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设Week1</title>
      <link href="/2023/12/01/%E6%AF%95%E8%AE%BEWeek1/"/>
      <url>/2023/12/01/%E6%AF%95%E8%AE%BEWeek1/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设Week1-关于MQ2传感器监测的实现"><a href="#毕设Week1-关于MQ2传感器监测的实现" class="headerlink" title="毕设Week1-关于MQ2传感器监测的实现"></a>毕设Week1-关于MQ2传感器监测的实现</h1><p>  <strong>对于毕设中第一个功能要求是实现对家庭室内环境（甲醇&#x2F;烟雾）的监测，当数据异常时，上报手机。</strong></p><h2 id="传感器选择理由"><a href="#传感器选择理由" class="headerlink" title="传感器选择理由"></a>传感器选择理由</h2><p>对于这一功能 我在传感器方面选择了</p><h3 id="一-MQ-2气体传感器"><a href="#一-MQ-2气体传感器" class="headerlink" title="一.MQ-2气体传感器"></a>一.MQ-2气体传感器</h3><p>选择这款传感器的原因是 </p><p>1）简单的驱动电路 2）高灵敏度&#x2F;快速响应恢复 3）广泛的探测范围 4）优异的稳定性&#x2F;寿命长</p><p>5）成本低</p><p>它非常适用于家庭或工厂的气体泄漏监测装置 适用于液化气、酒精、烟雾等监测 单价在7-8元之间 </p><h3 id="二-ESP8266开发板"><a href="#二-ESP8266开发板" class="headerlink" title="二.ESP8266开发板"></a>二.ESP8266开发板</h3><p>1）低成本 2）运用非常广泛 3）广泛的社区支持 4）尺寸小</p><h2 id="模块实现流程"><a href="#模块实现流程" class="headerlink" title="模块实现流程"></a>模块实现流程</h2><p> 那么对于第一个要求要实现的流程图是 检测有害气体浓度——&gt;  传输到云平台（通过ESP8266模块实现）——&gt;检测有害气体浓度是否过高：1）如果是将报警并输出 2）如果否则返回第一步继续对当前环境进行监测</p><h2 id="代码实现-烟雾监测"><a href="#代码实现-烟雾监测" class="headerlink" title="代码实现-烟雾监测"></a>代码实现-烟雾监测</h2><p>根据这个具体流程对于MQ2模块的实现功能的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">int MQ2Pin = A0; // MQ-2传感器连接的模拟输入引脚</span><br><span class="line">int LED = 8; // LED灯连接到数字引脚8</span><br><span class="line">int threshold = 40; // 设定的气体浓度阈值</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">    pinMode(LED, OUTPUT); // 设置LED引脚为输出模式</span><br><span class="line">    Serial.begin(9600);   // 开始串口通信</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">    int sensorValue = analogRead(MQ2Pin); // 读取传感器值</span><br><span class="line">    Serial.println(sensorValue);          // 输出传感器值到串口</span><br><span class="line"></span><br><span class="line">    if (sensorValue &gt; threshold) &#123;</span><br><span class="line">        // 如果传感器读数超过阈值，LED灯连续闪烁</span><br><span class="line">        digitalWrite(LED, HIGH);   // 打开LED灯</span><br><span class="line">        delay(500);                // 延时500毫秒</span><br><span class="line">        digitalWrite(LED, LOW);    // 关闭LED灯</span><br><span class="line">        delay(500);                // 延时500毫秒</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        digitalWrite(LED, LOW);    // 如果没有超过阈值，保持LED灯关闭</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个代码中会持续读取MQ2传感器的数值，并将读数通过串口输出。当读数超过预定值40时，通过连续闪烁LED灯来示意，如果读数低于或等于40时，LED灯将保持关闭。</p><p>但是对于读数40这个指标目前仍不能完全作为唯一指标，这是我基于该传感器说明手册而做出的数值考量，因为在正常条件下传感器的读数通常在20到30的范围内，所以我选择将报警阈值设定略高于这个数值，作为参考来监测潜在的危险气体浓度增加的情况。</p><h2 id="传感器实现原理"><a href="#传感器实现原理" class="headerlink" title="传感器实现原理"></a>传感器实现原理</h2><p>这一部分实现的原因是通过MQ-2气体传感器的输出信号被连接到Arduino上的一个模拟输入引脚。在Arduino上，模拟输入引脚用于读取模拟信号，这些信号通常表示为0到1023之间的值，对应于0到5伏的电压。</p><p>当MQ-2传感器检测到特定浓度的气体时，它会产生一个与气体浓度成比例的电压信号。Arduino通过其模拟输入引脚读取这个电压信号，并将其转换为数字值。</p><p>这样，通过读取这个数字值，可以大致了解传感器检测到的气体浓度。而在代码中，使用 <code>analogRead(MQ2Pin);</code> 函数来读取连接到指定模拟输入引脚的传感器的值。</p><h2 id="硬件连接模拟"><a href="#硬件连接模拟" class="headerlink" title="硬件连接模拟"></a>硬件连接模拟</h2><p>由于上次商家给我发的杜邦线发错成公对公 所以目前我的模拟暂且不能实现 所以我目前只能通过软件仿真来模拟 对于软件的选择 这边我选择了在<strong>Proteus</strong>平台来进行仿真 </p><p>由于我的Arduino库中的UNO芯片缺少VCC和GND 所以我选择Nano来搭建</p><p><a href="https://ooo.0x0.ooo/2023/12/01/Orwojx.png">https://ooo.0x0.ooo/2023/12/01/Orwojx.png</a></p><h2 id="报警反馈功能实现（预实现）"><a href="#报警反馈功能实现（预实现）" class="headerlink" title="报警反馈功能实现（预实现）"></a>报警反馈功能实现（预实现）</h2><p>对于当数据异常的时候上报手机这一功能的实现 根据资料收集方案有以下三种：</p><ol><li><p><strong>使用Wi-Fi或蓝牙模块</strong>：你可以将Arduino与Wi-Fi或蓝牙模块（如ESP8266或HC-05）相连。当检测到异常数据时，Arduino可以通过这些模块发送警报到手机。对于Wi-Fi模块，你可以使用HTTP请求发送数据到一个网络服务器，然后通过服务器推送通知到手机。对于蓝牙，你可以直接与手机应用通信。</p></li><li><p><strong>使用GSM模块</strong>：GSM模块（如SIM900）可以让Arduino通过移动网络发送SMS或拨打电话。当检测到异常值时，Arduino可以自动发送警报短信或拨打预设电话号码。</p></li><li><p><strong>集成IoT平台</strong>：使用IoT平台如<strong>Blynk</strong>或<strong>Thing Speak</strong>，你可以将传感器数据发送到云端，然后通过这些平台的手机应用接收通知。</p><p>对于该系统的设计中考虑到后续要利用手机通过蓝牙或Wi-Fi模块控制报警器 我选择利用WIFI模块对其接受数据，其模块选择ESP8266开发板将MQ2传感器数据发送到手机，而对于接受和处理来自Arduino的数据设计方法有设置一个手机应用或服务器端程序，同理要想设置服务器端点来接受来自ESP8266的HTTP请求并发送警报到手机，暂时考虑为利用开发一个安卓应用程序，通过互联网从我的服务器接收数据，并在手机上显示通知。</p><p>不过未来的方案中还可以考虑利用现有的云服务来实现。之所以有这个想法也是目前我在阿里云上有两个服务器，一个是新加坡的轻量服务器，一个是在河源的云服务器ECS。我可以利用云服务器作为接收来自ESP8266的HTTP请求的后端服务器，处理这些请求，并根据需要将警报推送到手机。</p><p>如果要做到这一点，到时候需要在服务器上运行一个网络应用，比如使用Node.js或者Python Flask。这个应用将监听来自ESP8266的HTTP请求，处理这些请求（比如记录数据、分析数据），并且可以通过集成推送通知服务、发送电子邮件或短信等方式，将警报发送到我的手机。</p></li></ol><h2 id="改进与思路"><a href="#改进与思路" class="headerlink" title="改进与思路"></a>改进与思路</h2><p>如果要确定MQ-2传感器在检测烟雾时哪个数值表示出现火灾，需要考虑几个因素：</p><ol><li><p><strong>传感器校准</strong>：MQ-2传感器需要根据特定环境进行校准。不同的环境（例如湿度、温度、气压）可能影响传感器的读数。</p></li><li><p><strong>阈值设定</strong>：通常情况下，烟雾传感器的阈值需要根据实际环境和需求来设定。没有一个固定的“通用”阈值可以适用于所有情况。</p></li><li><p><strong>实验数据</strong>：建立一个准确的阈值通常需要在控制条件下进行实验，以获取传感器在正常环境和火灾情况下的读数。</p></li><li><p><strong>参考资料</strong>：有些制造商可能会提供指导性的阈值，但这些值通常只能作为一个大致的参考。</p><p>所以在实际应用中，在后续阶段我需要将它安装在家里的厨房中，对其定期测试和不断数据校准，才能得到一个准确可靠的阈值，要能够准确的根据实际情况出现报警需要大量的数据支撑，这些都是后续需要考虑和改进的地方。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day7-20:18</title>
      <link href="/2023/11/30/Day7-20-18/"/>
      <url>/2023/11/30/Day7-20-18/</url>
      
        <content type="html"><![CDATA[<h1 id="部署服务器让我难受的一比"><a href="#部署服务器让我难受的一比" class="headerlink" title="部署服务器让我难受的一比"></a>部署服务器让我难受的一比</h1><p>很成功的部署服务器失败了 从今天到晚上 部署阿里云轻量到云服务器 都失败了 看了好几篇不同人的教程资料最后还是出现了 无法成功将数据拉去到服务器的结果 而且还不给我报错！ 离谱 然后我也暂时不去备案网站了</p><p>目前的问题就是 又换回Github部署的服务器后 多多少少会慢会卡 图床加载也满的情况 不过无所谓能让我正常更新博客内容就行</p><p>今天第一阶段的毕设耗材以及到了 开始着手把第一段的烟雾检测的硬件部分和软件部分给实现吧 争取在周末的时候对其进行更新总结 就这样吧</p><p>最后测试一下代码的嵌入是否可以成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line"> pinMode(<span class="number">13</span>,HIGH);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">digitalWrite(<span class="number">13</span>,HIGH);</span><br><span class="line">delay(<span class="number">500</span>);</span><br><span class="line">digitalWrite(<span class="number">13</span>,LOW);</span><br><span class="line">delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day7</title>
      <link href="/2023/11/30/Day7/"/>
      <url>/2023/11/30/Day7/</url>
      
        <content type="html"><![CDATA[<h1 id="关于将GithubPage部署到国内服务器（腾讯-阿里）"><a href="#关于将GithubPage部署到国内服务器（腾讯-阿里）" class="headerlink" title="关于将GithubPage部署到国内服务器（腾讯&#x2F;阿里）"></a>关于将GithubPage部署到国内服务器（腾讯&#x2F;阿里）</h1><p>首先附上来自于安知鱼大佬的详细教学过程 </p><p><a href="https://blog.anheyu.com/posts/ce6a.html">https://blog.anheyu.com/posts/ce6a.html</a></p><p>大致内容我不做过多叙述 需要注意的是</p><p>1.<u>你需要一个服务器 可以是轻量服务器也可以是云服务器ECS 如果是国内服务器那么需要做好备案 如果是来自于香港或者新加坡的则不需要了 （Plus：最近阿里云有搞活动学生可免费领取代金卷购买轻量或者云服务器）</u></p><p><u>2.你需要一个域名 可以在阿里云&#x2F;腾讯云购买都可以</u></p><p><u>3.熟悉一些常用的Linux指令 毕竟服务器是在Linux框架搭建的 常用的：wq!（保存） 进入vim后按i进入insert模式</u> </p><p><u>以及ctrl+c结束这些等等你需要大致掌握</u></p><p>之所以最后还是要把博客放在国内服务器的原因还是因为Github加载过慢很容易抽风，同时素材图片加载除了通过图床外，还有就是用CDN加速，而大部分CDN加速是需要有备案的，那最后我只能先选择放到国内服务器后备案，其次我当时用的SMMS图床+CFCDN把debuff给叠满了 接下来就是等审核吧 问题很简单了</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day6</title>
      <link href="/2023/11/29/Day6/"/>
      <url>/2023/11/29/Day6/</url>
      
        <content type="html"><![CDATA[<h1 id="究极体已经完成"><a href="#究极体已经完成" class="headerlink" title="究极体已经完成"></a>究极体已经完成</h1><p>  当我真正去尝试像一个码农一样做前端任务的时候 我发现很多时候并不是我想的那么简单 同时还会因为一些不正确的坐姿对颈椎产生极大的压力 可能这也是为什么程序员身体大部分一堆毛病吧 同时我还真切地感受到了改代码真的是从早到晚 掉头发真不是吹的 不过 无论如何 今天我基本上已经把这个小博客做到了究极体 如果说唯一欠缺的是什么呢 可能就是我没有备案目前 从而导致我不能配置CDN 从而导致我网页里很多图片会加载的很慢或者说加载不出来 这些事情还是等到年后或者工作后再去实现吧</p><p>  接下来的任务就是认真做好我的毕设并如期的在博客上给予反馈 就这样喵~</p><p> 我们下期再见！</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day5</title>
      <link href="/2023/11/28/Day5/"/>
      <url>/2023/11/28/Day5/</url>
      
        <content type="html"><![CDATA[<p>  最后还是用回了Butterfly这个主题 其原因还是小博主开发的主题始终功能性不强 且长期不更新等功能导致的</p><p>今天把第一阶段的耗材都给买好了 同时在Day4的文章中更新了详细的清单表 接下来的日子便是以周为单位 对毕设作品进行不断地迭代更新 同时在Blog上做出对每一次任务的完成汇报 目前还需要解决的是 不能正常在帖子内显示的图片的问题 我又在想是否要开始折腾这个小网站了…</p><p>BUT not now at least…</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day4</title>
      <link href="/2023/11/26/Day4/"/>
      <url>/2023/11/26/Day4/</url>
      
        <content type="html"><![CDATA[<h1 id="船需要一点点搭建"><a href="#船需要一点点搭建" class="headerlink" title="船需要一点点搭建"></a>船需要一点点搭建</h1><p>​    凡是都是从小做到大的 完成一件事情的道路上会有很多的困难和疑惑 但是我相信在现在来看 很多问题都是可以找到答案的 而这一切需要支持的前提是必须有强大的死磕精神</p><p>  这个周开始 我将把毕设作品内容开始以每个板块每个内容来逐个攻克 将不同的模块和代码给实现后最后完成其整个毕设的联调</p><p> 根据进度规划 这个周即按教学周第十一周 所需要完成的事情有</p><p><u>1.采购完目前需要的原材料</u></p><p><u>2.实现对气体传感器的硬件安装并实现代码部分的监测</u></p><p><u>3.通过结合OLED显示屏将监测到的数据反馈到上面</u></p><p><u>4.并且初步在代码部分实现当数据超过国标正常值后在OLED上做出提示.</u></p><h2 id="采购清单"><a href="#采购清单" class="headerlink" title="采购清单"></a>采购清单</h2><table><thead><tr><th align="center">购买元器件</th><th align="center">数量</th><th align="center">单价</th></tr></thead><tbody><tr><td align="center">气体传感器MQ-2</td><td align="center">2</td><td align="center">7.64</td></tr><tr><td align="center">显示屏SPI 0.96寸</td><td align="center">1</td><td align="center">8.7</td></tr><tr><td align="center">杜邦线</td><td align="center">40</td><td align="center">1.7</td></tr><tr><td align="center">ESP8266开发板</td><td align="center">1</td><td align="center">11.40</td></tr><tr><td align="center">蜂鸣器</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">塑料盒</td><td align="center">1</td><td align="center">4.3</td></tr><tr><td align="center">面包板</td><td align="center">1</td><td align="center">4.56</td></tr><tr><td align="center"><strong>合计</strong></td><td align="center"></td><td align="center">50.94（4元邮费）</td></tr></tbody></table><p>最后在星期天更新出一周的成果以及附上代码及图片显示。</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day3</title>
      <link href="/2023/11/24/Day3/"/>
      <url>/2023/11/24/Day3/</url>
      
        <content type="html"><![CDATA[<h1 id="慢慢来就好-别去担心太多"><a href="#慢慢来就好-别去担心太多" class="headerlink" title="慢慢来就好 别去担心太多"></a>慢慢来就好 别去担心太多</h1><p>最近很多事情加载而来 我忙着写关于毕设的开题大纲 我忙着搬家 我忙着出闲置 我忙着采集毕设材料 一件件事情交杂常常让我难以入眠 如果回到曾经住的那个Studio或许我会整夜录音 </p><p>我开始犯了一些致命的错误 我不能把太多东西压在不可控的未来身上 一些思考让我有了危机感 好 写到这里的时候 屎意来临 我先去一下 结束拉屎 继续码字</p><p>不过我只有仅省的18mins去表达完我想说的话 </p><h2 id="不要在意还没发生的事"><a href="#不要在意还没发生的事" class="headerlink" title="不要在意还没发生的事"></a>不要在意还没发生的事</h2><p>这个东西不仅仅是告诉我不要太过于忧虑 同时还告诉我并不是说未来的一些东西就是已成定局的 要有忧患意识啊 对于签好了三方协议这件事 我总想着会有退路 那么我可以放心大胆的相信未来 但是我是否就应该完全将我的未来放心在一张白纸协议上 现在我觉得错了 未来会有很多变数 如果我突然被辞退fire了 我并不是100%就能完全没有后顾之忧的 所以我必须明确的是 如果这份工作拿到了 还需要在工作上付出精力和时间才能让我的未来有保障 所以说对于接下来剩下的时间里 我还需要的是不断地加强专业类知识 同时对于考研这件事也不能完全的就给放弃开摆</p><h2 id="杀死欲望"><a href="#杀死欲望" class="headerlink" title="杀死欲望"></a>杀死欲望</h2><p>今天看了个帖子 讲到一个贫困生国家贷款欠了好几万 家里经济也很困难的情况下还想要追求昂贵的手机 那时的我处在上帝视角来看待这件事情的时候 大脑里只想着宣泄自己的情绪对她抨击 但是反过来想 自己也很多时候会有这种无止境的欲望（当然我并不处于他这种情况） 只是一味地想消费来填补野心 换句话来说这就是我一直存在的贪念 但是我常常是有这种想法但是并不一点会去实现 这也是我的ID的来源 2vain or thisisvain 都在告诉我 不要太过于追求那虚荣的东西</p><h2 id="极简就是最好"><a href="#极简就是最好" class="headerlink" title="极简就是最好"></a>极简就是最好</h2><p>对于博客现在用的主题 有时候我看到其他人使用的功能一堆 科技感拉满的主题的时候 我又开始犯病 有希望去折腾搞这些花里胡哨的 没太多意义的组件 所以我需要明确一点 博客只是一个我自己发泄想法的地方 我就想纯粹的记录一些东西 可以不用一定给任何人看 就当是给自己的 那他的作用无非就是让我记录文字 记录一些项目 这样就让我可以在任何时候点开这个网址就能找到曾经的一些痕迹 当然 那个avatar我得换一下 那个Minecraft中的钻石并不是我自己画的 没有一点成就感 等后面有机会了我再做一个绿宝石</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day2</title>
      <link href="/2023/11/22/Day2/"/>
      <url>/2023/11/22/Day2/</url>
      
        <content type="html"><![CDATA[<h1 id="Best-teacher-is-Interest"><a href="#Best-teacher-is-Interest" class="headerlink" title="Best teacher is Interest"></a>Best teacher is Interest</h1><p>重现建站第二天 依然出现了很多的bug和问题 不过都在我的逐个攻克下解决了 顺便还自己画了个favicon的图标（是这么拼的吗 全靠回忆）模仿了safari的指南针 虽然不是完全百分之百 但是我还是挺喜欢的 毕竟我是像素风的爱好者</p><p><strong>兴趣是最好的老师</strong> 如果不是因为处于对于博客的喜欢 我可能也不会坐在这里 宁愿去修改代码 去不断谷歌来寻找答案 突然想到自己做的音乐 如果那个时候真的喜欢 我应该像劳模般出歌吧 当然一方面是因为我懒… 但是随着时间的推移 我开始没有那么懒了 对待游戏也开始厌倦了 所以说我才能又将心思和兴趣不断扩展 </p><p><strong>不要一味的依赖他人</strong> 这是今晚我收获最大的事情 其实就是一个简单的网站莫名其妙404的原因 我一开始以为是网站没备案导致的 试图寻求大佬（贴) 后面在他的一篇帖子中正好看到了这一句话 突然觉得确实 或许我自己也能解决 生活中哪有那么多可以帮助你的人 都是靠自己琢磨和（百度+谷歌…)出来的</p><p><strong>早睡早起身体好</strong> 我需要调整作息了 接下来的日子 还是早点睡觉好 我还不希望很早就发际线越来越后移（已经有这个倾向）和掉发趋势 痛苦</p><p>END~~</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day1</title>
      <link href="/2023/11/21/Day1/"/>
      <url>/2023/11/21/Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="如果巅峰留不住-那就走来时的路"><a href="#如果巅峰留不住-那就走来时的路" class="headerlink" title="如果巅峰留不住 那就走来时的路"></a>如果巅峰留不住 那就走来时的路</h1><p>非常头疼的是一开始我喜欢折腾导致原来的网站404 在我的摆烂和疯狂谷歌+Stack overflow都没有找到解决的方法后 我选择一切从头开始 那么这次我就走极简风格 我就把这个博客很大概率上用来存我的thoughts </p><p>最近发生了很多事情 good or bad 有时候让我措不及防 让我不知道如何应对的时候 我选择戴上耳机 进入另外一个世界 好吧 每次又想写东西的时候我电脑不在身旁 </p><p>不过总的来说 越成长 我开始把钱看的很重要 如果没有钱 我的生活将会很糟糕 虽然说穷有穷的活法 但是我不甘心就那种普通的工资 每当我骑行在厦门的道路上 每块脚下的砖头都值一万 每当我看到别人用的是昂贵的东西 我就会难受 我曾经买得起 但是当我脱离了父母的给予 想要通过自己的努力去获得的时候 显得很渺小 所以这些东西一直激励着我 哪怕会很难 我也不想要放弃 我也想要坚持和克服</p><p>Anyway!good night!</p>]]></content>
      
      
      <categories>
          
          <category> Dairy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/20/hello-world/"/>
      <url>/2023/11/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
